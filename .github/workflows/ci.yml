name: CI

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v9

      - name: Setup Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@v3

      - name: Check Rust formatting
        run: nix develop -c cargo fmt --all -- --check

      - name: Run clippy
        run: nix develop -c cargo clippy --all-targets --all-features -- -D warnings

      - name: Run cargo check
        run: nix develop -c cargo check --all-targets

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v9

      - name: Setup Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@v3

      - name: Run tests
        run: nix develop -c cargo test --all-features

      - name: Run doc tests
        run: nix develop -c cargo test --doc

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v9

      - name: Setup Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@v3

      - name: Build binary
        run: |
          if [ "${{ matrix.target }}" = "x86_64-unknown-linux-musl" ]; then
            nix build .#default
          else
            nix develop -c cargo build --release --target ${{ matrix.target }}
          fi

      - name: Upload binary artifact
        if: matrix.target == 'x86_64-unknown-linux-musl'
        uses: actions/upload-artifact@v4
        with:
          name: njalla-webhook-${{ matrix.target }}
          path: result/bin/njalla-webhook
          retention-days: 7

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
    needs: [check, test]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v9

      - name: Setup Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image with Nix
        run: |
          nix build .#dockerImage
          docker load < result

      - name: Get image metadata
        id: meta
        run: |
          # Get the image ID of njalla-webhook specifically
          IMAGE_ID=$(docker images njalla-webhook:latest --format '{{.ID}}')
          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_OUTPUT
          REPO_LOWER=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')
          echo "REPO_LOWER=$REPO_LOWER" >> $GITHUB_OUTPUT

      - name: Generate Docker tags
        id: tags
        run: |
          TAGS=""
          REPO_LOWER=${{ steps.meta.outputs.REPO_LOWER }}

          # Get current date for date-based tags
          DATE=$(date -u +%Y%m%d)
          DATE_TIME=$(date -u +%Y%m%d-%H%M%S)

          # Always tag with commit SHA (both formats)
          TAGS="ghcr.io/${REPO_LOWER}:sha-${GITHUB_SHA::7}"
          TAGS="${TAGS},ghcr.io/${REPO_LOWER}:${GITHUB_SHA::7}"
          TAGS="${TAGS},ghcr.io/${REPO_LOWER}:${GITHUB_SHA}"

          # Tag with branch name if not a tag
          if [[ "${{ github.ref }}" == "refs/heads/"* ]]; then
            BRANCH=${GITHUB_REF##*/}
            TAGS="${TAGS},ghcr.io/${REPO_LOWER}:${BRANCH}"
            TAGS="${TAGS},ghcr.io/${REPO_LOWER}:${BRANCH}-${DATE}"
            TAGS="${TAGS},ghcr.io/${REPO_LOWER}:${BRANCH}-${GITHUB_SHA::7}"
            if [[ "${BRANCH}" == "master" ]] || [[ "${BRANCH}" == "main" ]]; then
              TAGS="${TAGS},ghcr.io/${REPO_LOWER}:latest"
              TAGS="${TAGS},ghcr.io/${REPO_LOWER}:${DATE}"
            fi
          fi

          # Tag with version if it's a tag
          if [[ "${{ github.ref }}" == "refs/tags/"* ]]; then
            VERSION=${GITHUB_REF##*/}
            TAGS="${TAGS},ghcr.io/${REPO_LOWER}:${VERSION}"
            # Also tag as latest for version tags
            TAGS="${TAGS},ghcr.io/${REPO_LOWER}:latest"
          fi

          echo "TAGS=$TAGS" >> $GITHUB_OUTPUT

      - name: Push Docker images
        run: |
          IMAGE_ID=${{ steps.meta.outputs.IMAGE_ID }}
          IFS=',' read -ra TAG_ARRAY <<< "${{ steps.tags.outputs.TAGS }}"

          for TAG in "${TAG_ARRAY[@]}"; do
            echo "Tagging and pushing $TAG"
            docker tag $IMAGE_ID $TAG
            docker push $TAG
          done

  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: [check, test, build, docker]
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: njalla-webhook-x86_64-unknown-linux-musl
          path: ./artifacts

      - name: Create tarball
        run: |
          cd artifacts
          tar -czf njalla-webhook-${{ github.ref_name }}-x86_64-linux.tar.gz njalla-webhook
          cd ..

      - name: Generate release notes
        run: |
          echo "# Njalla Webhook Provider ${{ github.ref_name }}" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## Docker Image" >> RELEASE_NOTES.md
          echo "\`\`\`bash" >> RELEASE_NOTES.md
          echo "docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}" >> RELEASE_NOTES.md
          echo "\`\`\`" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## Binary Download" >> RELEASE_NOTES.md
          echo "Download the pre-built binary from the assets below." >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## Changelog" >> RELEASE_NOTES.md
          git log --oneline --no-merges $(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")..HEAD >> RELEASE_NOTES.md || echo "First release" >> RELEASE_NOTES.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/njalla-webhook-${{ github.ref_name }}-x86_64-linux.tar.gz
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: ${{ contains(github.ref, '-rc') || contains(github.ref, '-beta') || contains(github.ref, '-alpha') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}